# bubble_flow: the hires pipeline            
# author CY                   
# date 2020/9/22                   

import os
import pandas

configfile: "config/config.yaml"
ana_home = config["ana_home"] # home directory of all analysis results
sample_table = pd.read_csv("config/sample_table.csv", index_col=0)

# util functions
def log_path(file):
    return os.path.join(ana_home, "logs", "{sample}", file)
def get_raw_fq(wildcards):
    sample = wildcards.sample
    R1_path = sample_table.loc[sample, "R1_file"],
    R2_path = sample_table.loc[sample, "R2_file"]
    return {"R1":R1_path, "R2":R2_path}
rule count_reads:
    input:
        unpack(get_raw_fq)
    output:
        os.path.join(ana_home,"info","{sample}.info")
    threads: 1
    resources: 
        nodes = 1
    message:
        " ---> count_reads :{wildcards.sample} : {threads} cores"
    wrapper:
        "https://github.com/zhuakexi/snakemake_wrappers/count_reads"
rule split:
    input:
        unpack(get_raw_fq)
    output:
        untrimmed_output = os.path.join(ana_home,"DNA","{sample}_R1.fq.gz")
        untrimmed_paired_output = os.path.join(ana_home,"DNA","{sample}_R2.fq.gz")
        output = os.path.join(ana_home, "RNA", "{sample}_R1.fq.gz")
        paired_output = os.path.join(ana_home, "RNA", "{sample}_R2.fq.gz")
    threads: config["cpu"]["split"]
    resources: nodes = config["cpu"]["split"] 
    params:
        # rna specific adapter
        adapter=r"XGGTTGAGGTAGTATTGCGCAATG;o=20"
    log: log_path("split.config")
    message: "---> split : {wildcards.sample} : {threads} cores"
    wrapper:
        "https://github.com/zhuakexi/snakemake_wrappers/cutadapter_pe_4o"
# for RNA
rule cut_round2:
    input:
        R1 = rules.split.output.RNA_R1,
        R2 = rules.split.output.RNA_R2
    output:
        output = os.path.join(ana_home, "RNA_c", "{sample}_R1.fq.gz")
        paired_output = os.path.join(ana_home, "RNA_c", "{sample}_R2.fq.gz")
    threads: config["cpu"]["cut_r2"]
    resources: nodes = config["cpu"]["cut_r2"]
    params: adapter=r"XNNNNNNNNTTTTTTTTTTTTTTT;o=18"
    log: log_path("cut_round2.config")
    message: "---> cut_round2 : {wildcards.sample} : {threads} cores"
    wrapper:
        "https://github.com/zhuakexi/snakemake_wrappers/cutadapter_pe_2o"
include: "rules/extract_umi.smk"
include: "rules/merge_rna.smk"
include: "rules/star_mapping.smk"
include: "rules/count.smk"
# for Hi-C
rule bwa_mem:
    input:
        R1 = rules.split.output.untrimmed_output,
        R2 = rules.split.output.untrimmed_paired_output
    output:
        protected( os.path.join(ana_home,"sam","{sample}.aln.sam.gz"))
    params:
        index = config["ref"]["bwa"],
        extra = r"-R '@RG\tID:{sample}\tPL:ILLUMINA\tSM:{sample}'"
    threads: 
        config["cpu"]["bwa"]
    resources:
        nodes = config["cpu"]["bwa"]
    log:
        log_path("bwa.log")
    message:
        " ---> bwa : {wildcards.sample} : {threads} cores"
    wrapper:
        # wrapper shipped with conda yaml
        "https://github.com/zhuakexi/snakemake_wrappers/bwa_mem2"
rule sam2seg:
    input:
        rules.bwa_mem.output
    output:
        os.path.join(ana_home, "seg", "{sample}.seg.gz")
    params:
        snp = config["snp"],
        sex = config["sex"],
        snp_file = config["ref"]["snp"],
        par_file = config["ref"]["par"],
        k8 = config["software"]["k8"],
        js = config["software"]["js"],
    resources:
        nodes = 1
    log:
        log_path("sam2seg.log")
    message:
        " ------> sam2seg : {wildcards.sample} : 1 core"
    wrapper:
        "https://github.com/zhuakexi/snakemake_wrappers/sam2seg"
include: "rules/seg2pairs.smk"
include: "rules/clean_pairs.smk"
include: "rules/impute.smk"
include: "rules/build.smk"
include: "rules/pairs2cons.smk"
include: "rules/clean3d.smk"
include: "rules/align3d.smk"
include: "rules/vis.smk"
rule do_split:
    input:
        expand(rules.split.output, sample=SAMPLES)
rule do_bwa:
    input:
        expand(rules.bwa_map.output, sample=SAMPLES) 
rule do_sam2seg:
    input:
        expand(rules.sam2seg.output, sample=SAMPLES)
rule do_seg2pairs:
    input:
        expand(rules.seg2pairs.output, sample=SAMPLES)
rule do_clean1:
    input:
        expand(rules.clean1.output, sample=SAMPLES)
rule do_clean12:
    input:
        expand(rules.clean12.output, sample=SAMPLES)
rule do_clean123:
    input:
        expand(rules.clean123.output, sample=SAMPLES)
rule do_pairs_info:
    input:
        expand(rules.pairs_info.output, sample=SAMPLES)
rule do_impute:
    input:
        expand(rules.impute.output, sample=SAMPLES)
# only work on cell listed in 3d_list.tsv 
# before structure building, check pairs info, choose qualified cells and change 3d_list.tsv 
rule do_build:
    input:
        expand(rules.build.output, sample=_3d_SAMPLES, rep=list(range(1,6)))
rule do_clean3d:
    input:
        expand(rules.clean3d.output, sample=_3d_SAMPLES, rep=list(range(1,6)))
rule do_align3d:
    input:
        expand(rules.align3d.output, sample=_3d_SAMPLES, rep=list(range(1,6)) )
rule do_vis:
    input:
        expand(rules.vis.output, sample=_3d_SAMPLES)
# only for hires
rule do_extract_umi:
    input:
        expand(rules.extract_umi.output, sample=SAMPLES),
        expand(rules.extract_cell_name.output, sample=SAMPLES)
rule do_cut_round2:
    input:
        expand(rules.cut_round2.output, sample=SAMPLES)
rule do_merge_rna:
    input:
        rules.merge_rna.output
rule do_star:
    input:
        rules.star_mapping.output
rule do_count:
    input:
        rules.matrix_count.output