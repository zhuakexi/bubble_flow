# bubble_flow: the hires pipeline            
# author CY                   
# date 2020/9/22                   

import os
import pandas as pd

configfile: "config/config.yaml"
# samples
sample_table = pd.read_csv("config/sample_table.csv", dtype={0:pd.StringDtype()},index_col=0)
# dirs
ana_home = config["ana_home"] # home directory of all analysis results
rd = os.path.join(ana_home,"rd") # dir to store stat jsons
# softwares
hires = config["software"]["hires"]
hickit = config["software"]["hickit"]
k8 = config["software"]["k8"]
js = config["software"]["js"]
# reference
snp = config["reference"]["snp"]
PAR = config["reference"]["par"]

# util functions
def log_path(file):
    return os.path.join(ana_home, "logs", "{sample}", file)
def get_raw_fq(wildcards):
    sample = wildcards.sample
    R1_path = sample_table.loc[sample, "R1_file"],
    R2_path = sample_table.loc[sample, "R2_file"]
    return {"R1":R1_path, "R2":R2_path}
# main workflow
rule count_reads:
    input:
        unpack(get_raw_fq)
    output:
        # dummy and backup information 
        os.path.join(ana_home,"info","{sample}.reads.info")
    threads: 1
    resources: 
        nodes = 1
    message:
        " ---> count_reads :{wildcards.sample} : {threads} cores"
    conda:"./envs/hires.yaml"
    shell:
        """
        python {hires} gcount \
        -f pe_fastq -rd {rd} \
        -sa {wildcards.sample} -at raw_reads \
        {input.R1} 1> {output}
        """
rule split:
    input:
        unpack(get_raw_fq)
    output:
        untrimmed_output = os.path.join(ana_home,"DNA","{sample}_R1.fq.gz"),
        untrimmed_paired_output = os.path.join(ana_home,"DNA","{sample}_R2.fq.gz"),
        output = os.path.join(ana_home, "RNA", "{sample}_R1.fq.gz"),
        paired_output = os.path.join(ana_home, "RNA", "{sample}_R2.fq.gz")
    threads: config["cpu"]["split"]
    resources: nodes = config["cpu"]["split"] 
    params:
        # rna specific adapter
        adapter=' -G "XGGTTGAGGTAGTATTGCGCAATG;o=20" '
    log: log_path("split.log")
    message: "---> split : {wildcards.sample} : {threads} cores"
    wrapper:
        #"https://gitee.com/zhuakexi/snakemake_wrappers/raw/v0.10/cutadapt_pe_4o"
        "file:./wrappers/cutadapt_pe_4o"
rule count_dna_reads:
    input:
        # DNA_R1
        rules.split.output.untrimmed_output
    output:
        os.path.join(ana_home,"info","{sample}.dna_reads.info")
    threads: 1
    resources:
        nodes = 1
    message:
        " ---> count_dna_reads : {wildcards.sample} :{threads} cores"
    conda:"./envs/hires.yaml"
    shell:
        """
        python {hires} gcount \
        -f pe_fastq -rd {rd} -sa {wildcards.sample} -at dna_reads {input} \
        1> {output}
        """
# for RNA
rule cut_round2:
    input:
        R1 = rules.split.output.output, #RNA_R1
        R2 = rules.split.output.paired_output #RNA_R2
    output:
        output = os.path.join(ana_home, "RNA_c", "{sample}_R1.fq.gz"),
        paired_output = os.path.join(ana_home, "RNA_c", "{sample}_R2.fq.gz")
    threads: config["cpu"]["cut_r2"]
    resources: nodes = config["cpu"]["cut_r2"]
    params: adapter=' -G "XNNNNNNNNTTTTTTTTTTTTTTT;o=18" '
    log: log_path("cut_round2.config")
    message: "---> cut_round2 : {wildcards.sample} : {threads} cores"
    wrapper:
        #"https://gitee.com/zhuakexi/snakemake_wrappers/raw/v0.10/cutadapt_pe_2o"
        "file:./wrappers/cutadapt_pe_2o"
rule count_rna_reads:
    input:
        # RNA_R1 after trim_cleaning
        rules.cut_round2.output.output
    output:
        os.path.join(ana_home,"info","{sample}.rna_reads.info")
    threads: 1
    resources:
        nodes = 1
    message:
        " ---> count_rna_reads : {wildcards.sample} :{threads} cores"
    conda:"./envs/hires.yaml"
    shell:
        """
        python {hires} gcount \
        -f pe_fastq -rd {rd} -sa {wildcards.sample} -at rna_reads {input} \
        1> {output}
        """
include: "rules/RNA/prepareRNA.smk"
include: "rules/RNA/star_mapping.smk"
include: "rules/RNA/feature_count.smk"

# for Hi-C
rule bwa_mem:
    input:
        R1 = rules.split.output.untrimmed_output,
        R2 = rules.split.output.untrimmed_paired_output
    output:
        protected( os.path.join(ana_home,"sam","{sample}.aln.sam.gz"))
    params:
        index = config["reference"]["bwa"],
        extra = r"-R '@RG\tID:{sample}\tPL:ILLUMINA\tSM:{sample}'"
    threads: 
        config["cpu"]["bwa"]
    resources:
        nodes = config["cpu"]["bwa"]
    log:
        log_path("bwa.log")
    message:
        " ---> bwa : {wildcards.sample} : {threads} cores"
    wrapper:
        # wrapper shipped with conda yaml
        #"https://gitee.com/zhuakexi/snakemake_wrappers/raw/v0.10/bwa_mem2"
        "file:./wrappers/bwa_mem2"
include: "rules/sample_check.smk"
include: "rules/sam2seg.smk"
include: "rules/seg2pairs.smk"
include: "rules/pairs_info.smk"
include: "rules/clean_pairs.smk"
include: "rules/impute.smk"
include: "rules/sep_clean.smk"
include: "rules/build.smk"
include: "rules/clean3d.smk"
include: "rules/rmsd.smk"
include: "rules/vis.smk"
include: "rules/collect_info.smk"
rule All:
    input:
        rules.collect_info.output,
        expand(rules.count_reads.output,sample=sample_table.index),
        expand(rules.count_dna_reads.output,sample=sample_table.index),
        expand(rules.count_rna_reads.output,sample=sample_table.index),
        expand(rules.seg2pairs.output, sample=sample_table.index),
        expand(rules.cif.output, sample=sample_table.index, rep=list(range(1,6))),
        expand(rules.rmsd.output, sample=sample_table.index),
        expand(rules.rmsd_50k.output, sample=sample_table.index),
        expand(rules.rmsd_200k.output, sample=sample_table.index),
        expand(rules.rmsd_1m.output, sample=sample_table.index),
        rules.matrix_count.output