# bubble_flow: the hires pipeline            
# author CY                   
# date 2020/9/22                   

import os
import pandas as pd

configfile: "config/config.yaml"
ana_home = config["ana_home"] # home directory of all analysis results
sample_table = pd.read_csv("config/sample_table.csv", index_col=0)

# util functions
def log_path(file):
    return os.path.join(ana_home, "logs", "{sample}", file)
def get_raw_fq(wildcards):
    sample = wildcards.sample
    R1_path = sample_table.loc[sample, "R1_file"],
    R2_path = sample_table.loc[sample, "R2_file"]
    return {"R1":R1_path, "R2":R2_path}
rule count_reads:
    input:
        unpack(get_raw_fq)
    output:
        os.path.join(ana_home,"info","{sample}.info")
    threads: 1
    resources: 
        nodes = 1
    message:
        " ---> count_reads :{wildcards.sample} : {threads} cores"
    wrapper:
        #"https://gitee.com/zhuakexi/snakemake_wrappers/raw/v0.10/count_reads"
        "file:./wrappers/count_reads"
rule split:
    input:
        unpack(get_raw_fq)
    output:
        untrimmed_output = os.path.join(ana_home,"DNA","{sample}_R1.fq.gz"),
        untrimmed_paired_output = os.path.join(ana_home,"DNA","{sample}_R2.fq.gz"),
        output = os.path.join(ana_home, "RNA", "{sample}_R1.fq.gz"),
        paired_output = os.path.join(ana_home, "RNA", "{sample}_R2.fq.gz")
    threads: config["cpu"]["split"]
    resources: nodes = config["cpu"]["split"] 
    params:
        # rna specific adapter
        adapter=' -G "XGGTTGAGGTAGTATTGCGCAATG;o=20" '
    log: log_path("split.log")
    message: "---> split : {wildcards.sample} : {threads} cores"
    wrapper:
        #"https://gitee.com/zhuakexi/snakemake_wrappers/raw/v0.10/cutadapt_pe_4o"
        "file:./wrappers/cutadapt_pe_4o"
# for RNA
rule cut_round2:
    input:
        R1 = rules.split.output.output, #RNA_R1
        R2 = rules.split.output.paired_output #RNA_R2
    output:
        output = os.path.join(ana_home, "RNA_c", "{sample}_R1.fq.gz"),
        paired_output = os.path.join(ana_home, "RNA_c", "{sample}_R2.fq.gz")
    threads: config["cpu"]["cut_r2"]
    resources: nodes = config["cpu"]["cut_r2"]
    params: adapter=' -G "XNNNNNNNNTTTTTTTTTTTTTTT;o=18" '
    log: log_path("cut_round2.config")
    message: "---> cut_round2 : {wildcards.sample} : {threads} cores"
    wrapper:
        #"https://gitee.com/zhuakexi/snakemake_wrappers/raw/v0.10/cutadapt_pe_2o"
        "file:./wrappers/cutadapt_pe_2o"
include: "rules/extract_umi.smk"
include: "rules/merge_rna.smk"
include: "rules/star_mapping.smk"
include: "rules/count.smk"
# for Hi-C
rule bwa_mem:
    input:
        R1 = rules.split.output.untrimmed_output,
        R2 = rules.split.output.untrimmed_paired_output
    output:
        protected( os.path.join(ana_home,"sam","{sample}.aln.sam.gz"))
    params:
        index = config["reference"]["bwa"],
        extra = r"-R '@RG\tID:{sample}\tPL:ILLUMINA\tSM:{sample}'"
    threads: 
        config["cpu"]["bwa"]
    resources:
        nodes = config["cpu"]["bwa"]
    log:
        log_path("bwa.log")
    message:
        " ---> bwa : {wildcards.sample} : {threads} cores"
    wrapper:
        # wrapper shipped with conda yaml
        #"https://gitee.com/zhuakexi/snakemake_wrappers/raw/v0.10/bwa_mem2"
        "file:./wrappers/bwa_mem2"
rule sam2seg:
    input:
        rules.bwa_mem.output
    output:
        os.path.join(ana_home, "seg", "{sample}.seg.gz")
    params:
        snp = config["snp"],
        sex = config["sex"],
        snp_file = config["reference"]["snp"],
        par_file = config["reference"]["par"],
        k8 = config["software"]["k8"],
        js = config["software"]["js"],
    resources:
        nodes = 1
    log:
        log_path("sam2seg.log")
    message:
        " ---> sam2seg : {wildcards.sample} : 1 core"
    wrapper:
        #"https://gitee.com/zhuakexi/snakemake_wrappers/raw/v0.10/sam2seg"
        "file:./wrappers/sam2seg"
include: "rules/seg2pairs.smk"
include: "rules/collect_info.smk"
#include: "rules/clean_pairs.smk"
#include: "rules/impute.smk"
#include: "rules/build.smk"
#include: "rules/pairs2cons.smk"
#include: "rules/clean3d.smk"
#include: "rules/align3d.smk"
#include: "rules/vis.smk"
rule All:
    input:
        rules.collect_info.output,
        expand(rules.seg2pairs.output, sample=sample_table.index),
        rules.count.output